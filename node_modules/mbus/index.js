var EventEmitter = require('events').EventEmitter;
var util = require('util');
const mbus_module = require('./lib/mbus');

var mbus = function(){
	EventEmitter.call(this);
	this.index_ = 0;
	this.ip_ = "";
	this.requestId_ = 0;
	this.defaultTimeOut_ = 10000;
	this.callbacks = {};
	this.mbusObj = new mbus_module.mbusObj();
};
util.inherits(mbus, EventEmitter);

mbus.prototype.getRequestId = function(){
	return this.requestId_++;
};

mbus.prototype.setDefaultTimeOut = function(timeout){
	this.defaultTimeOut_ = timeout;
};

mbus.prototype.destroyCallback = function(callbackKey) {
	var response = this.callbacks[callbackKey];
	delete this.callbacks[callbackKey];
	if(response){
		response.timer && clearTimeout(response.timer);
	}
};

mbus.prototype.getCallbackKey = function(requestId) {
	return this.ip_ + "_" + this.index_ + "_" + requestId;
}

mbus.prototype.start = function(index){
	this.index_ = index;
	var self = this;
	this.mbusObj.start(index,function(type, requestId, ip, index, data){
		var callbackKey = self.getCallbackKey(requestId);
		var response = self.callbacks[callbackKey];
		var err = null;
		if(type != 0){
		    err = new Error(data);
		}
		if(response){
			self.destroyCallback(callbackKey);
			response.cb(err, type, ip, index, data);
		}else{
			self.emit('message',err, type, ip, index, data);
		}
	});
	this.ip_ = this.mbusObj.getIp();
};

mbus.prototype.write = function(desIp,desIndex,msg,timeout,cb){
	var requestId = this.getRequestId();
	var callbackKey = this.getCallbackKey(requestId);
	var self = this;
	if(cb){
		timeout = timeout?timeout:this.defaultTimeOut_;
		var timer = null;
		timer = setTimeout(function() {
    			timer = null;
          delete self.callbacks[callbackKey];
    			cb(new Error('response time out'));
  		}, timeout);

		var response = {};
		response['cb'] = cb;
		response['timer'] = timer;
		this.callbacks[callbackKey] = response;
	}

	var ret = this.mbusObj.write(desIp,desIndex,requestId,msg);
	if(ret == 0){
		this.destroyCallback(callbackKey);
	}
};

module.exports = new mbus();
